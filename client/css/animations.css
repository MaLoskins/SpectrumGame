/* ===== DARK MODE ANIMATIONS ===== */

/* GPU-accelerated base animations */
@keyframes spin {
  to { transform: rotate3d(0, 0, 1, 360deg); }
}

@keyframes pulse {
  50% { 
    opacity: 0.8;
    transform: scale3d(1.05, 1.05, 1);
  }
}

@keyframes bounce {
  20%, 53%, 80%, to { transform: translate3d(0, 0, 0); }
  40%, 43% { transform: translate3d(0, -8px, 0); }
  70% { transform: translate3d(0, -4px, 0); }
  90% { transform: translate3d(0, -2px, 0); }
}

@keyframes shake {
  10%, 30%, 50%, 70%, 90% { transform: translateX(-4px); }
  20%, 40%, 60%, 80% { transform: translateX(4px); }
}

/* Optimized fade animations using GPU */
@keyframes fadeIn {
  from { opacity: 0; }
}

@keyframes fadeOut {
  to { opacity: 0; }
}

/* Combined slide animations with transform3d */
@keyframes slideIn {
  from {
    opacity: 0;
    transform: var(--slide-from, translate3d(0, -20px, 0));
  }
}

@keyframes slideOut {
  to {
    opacity: 0;
    transform: var(--slide-to, translate3d(0, -20px, 0));
  }
}

/* Consolidated scale animations */
@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale3d(var(--scale-from, 0.8), var(--scale-from, 0.8), 1);
  }
}

@keyframes flipIn {
  from {
    opacity: 0;
    transform: perspective(400px) rotateY(90deg);
  }
  40% { transform: perspective(400px) rotateY(-20deg); }
  60% { transform: perspective(400px) rotateY(10deg); }
  80% { transform: perspective(400px) rotateY(-5deg); }
  to { transform: perspective(400px) rotateY(0); }
}

/* Glow animations with CSS custom properties */
@keyframes glow {
  50% {
    filter: drop-shadow(0 0 var(--glow-size, 20px) var(--glow-color, var(--accent-teal)));
  }
}

@keyframes rainbowGlow {
  0%, 100% { filter: drop-shadow(0 0 20px var(--accent-teal)); }
  16.66% { filter: drop-shadow(0 0 20px var(--accent-electric-blue)); }
  33.33% { filter: drop-shadow(0 0 20px var(--accent-lilac)); }
  50% { filter: drop-shadow(0 0 20px var(--accent-pink)); }
  66.66% { filter: drop-shadow(0 0 20px var(--accent-orange)); }
  83.33% { filter: drop-shadow(0 0 20px var(--accent-green)); }
}

/* Game-specific optimized animations */
@keyframes targetReveal {
  from {
    opacity: 0;
    transform: scale3d(0, 0, 1) rotate3d(0, 0, 1, -180deg);
  }
  50% {
    transform: scale3d(1.3, 1.3, 1) rotate3d(0, 0, 1, 10deg);
  }
}

@keyframes guessPlacement {
  50% {
    transform: scale3d(1.2, 1.2, 1);
  }
}

/* Timer animations using transform for performance */
@keyframes timerWarning {
  50% {
    background: rgba(255, 149, 0, 0.1);
    transform: scale3d(1, 1, 1);
    filter: drop-shadow(0 0 20px rgba(255, 149, 0, 0.5));
  }
}

@keyframes timerDanger {
  50% {
    background: rgba(255, 56, 100, 0.2);
    transform: scale3d(1.05, 1.05, 1);
    filter: drop-shadow(0 0 30px rgba(255, 56, 100, 0.8));
  }
}

/* Spectrum gradient animation optimized */
@keyframes spectrumShift {
  to { background-position: 200% 50%; }
}

/* Notification animations consolidated */
@keyframes notification {
  from { transform: var(--notification-from, translateX(100%)); }
}

/* Combined celebration animations */
@keyframes celebrate {
  25% { transform: scale3d(1.1, 1.1, 1) rotate3d(0, 0, 1, -5deg); }
  50% { transform: scale3d(1.2, 1.2, 1) rotate3d(0, 0, 1, 5deg); }
  75% { transform: scale3d(1.1, 1.1, 1) rotate3d(0, 0, 1, -2deg); }
}

/* Particle animation with GPU acceleration */
@keyframes particleFloat {
  10% {
    opacity: 1;
    transform: translate3d(10px, -10px, 0) scale3d(1, 1, 1);
  }
  90% {
    opacity: 1;
    transform: translate3d(-10px, -100px, 0) scale3d(1, 1, 1);
  }
  to {
    opacity: 0;
    transform: translate3d(-20px, -120px, 0) scale3d(0, 0, 1);
  }
}

/* Progress animation optimized */
@keyframes progressShine {
  to { transform: translateX(200%); }
}

/* Utility classes with will-change optimization */
.animate-spin { 
  animation: spin 1s linear infinite;
  will-change: transform;
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  will-change: opacity, transform;
}

.animate-bounce {
  animation: bounce 1s infinite;
  will-change: transform;
}

.animate-shake {
  animation: shake 0.5s ease-in-out;
  will-change: transform;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite;
  will-change: filter;
}

/* Consolidated slide animations */
.animate-slide-in-top { --slide-from: translate3d(0, -20px, 0); animation: slideIn 0.3s ease-out; }
.animate-slide-in-bottom { --slide-from: translate3d(0, 20px, 0); animation: slideIn 0.3s ease-out; }
.animate-slide-in-left { --slide-from: translate3d(-20px, 0, 0); animation: slideIn 0.3s ease-out; }
.animate-slide-in-right { --slide-from: translate3d(20px, 0, 0); animation: slideIn 0.3s ease-out; }

/* Consolidated scale animations */
.animate-scale-in { animation: scaleIn 0.3s ease-out; }
.animate-zoom-in { --scale-from: 0.3; animation: scaleIn 0.3s ease-out; }

/* Performance-optimized transitions */
.animate-fade-in { animation: fadeIn 0.3s ease-out; }
.animate-fade-out { animation: fadeOut 0.3s ease-out; }
.animate-target-reveal { animation: targetReveal 0.6s ease-out; will-change: opacity, transform; }
.animate-guess-placement { animation: guessPlacement 0.4s ease-out; will-change: transform; }
.animate-notification-slide-in { --notification-from: translateX(100%); animation: notification 0.3s ease-out; }
.animate-celebration { animation: celebrate 0.6s ease-out; }

/* Timer states with optimized properties */
.timer.warning { animation: timerWarning 1s ease-in-out infinite; }
.timer.danger { animation: timerDanger 0.5s ease-in-out infinite; }

/* Spectrum gradient optimization */
.spectrum-gradient.animated {
  background-size: 200% 200%;
  animation: spectrumShift 4s ease-in-out infinite;
  will-change: background-position;
}

/* Hover effects with transform3d */
.hover-lift {
  transition: transform 250ms, box-shadow 250ms;
  will-change: transform;
}

.hover-lift:hover {
  transform: translate3d(0, -2px, 0);
  box-shadow: 0 8px 25px rgba(0, 212, 255, 0.2);
}

.hover-scale {
  transition: transform 250ms;
  will-change: transform;
}

.hover-scale:hover {
  transform: scale3d(1.05, 1.05, 1);
}

/* Ripple effect optimization */
.ripple {
  position: relative;
  overflow: hidden;
  contain: paint;
}

.ripple-effect {
  position: absolute;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  transform: scale(0);
  animation: rippleExpand 0.6s ease-out;
  pointer-events: none;
  will-change: transform;
}

@keyframes rippleExpand {
  to {
    transform: scale(4);
    opacity: 0;
  }
}

/* Loading states with GPU acceleration */
.skeleton {
  background: linear-gradient(
    90deg,
    var(--glass-bg) 25%,
    var(--hover-bg) 50%,
    var(--glass-bg) 75%
  );
  background-size: 200% 100%;
  animation: skeletonLoading 1.5s infinite;
  will-change: background-position;
}

@keyframes skeletonLoading {
  to { background-position: -200% 0; }
}

/* Progress bar optimization */
.progress-fill::after {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  animation: progressShine 2s infinite;
  will-change: transform;
}

/* Particle system optimization */
.particle {
  position: absolute;
  width: 4px;
  height: 4px;
  background: var(--accent-teal);
  border-radius: 50%;
  animation: particleFloat 3s ease-out;
  will-change: transform, opacity;
  contain: layout style paint;
}

/* Responsive adjustments with consolidated rules */
@media (max-width: 768px) {
  .animate-bounce { animation-duration: 1.5s; }
  .animate-pulse { animation-duration: 3s; }
  .hover-lift:hover { transform: translate3d(0, -1px, 0); }
  .hover-scale:hover { transform: scale3d(1.02, 1.02, 1); }
}

/* Accessibility optimization */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation: none !important;
    transition: none !important;
  }
  
  .skeleton { background: var(--glass-bg); }
  .progress-fill::after { display: none; }
}

/* Dark mode effects with filter optimization */
.glow-text {
  filter: drop-shadow(0 0 10px currentColor) drop-shadow(0 0 20px currentColor);
}

.neon-border {
  border: 2px solid var(--accent-teal);
  box-shadow: inset 0 0 10px rgba(0, 212, 255, 0.2), 0 0 20px rgba(0, 212, 255, 0.3);
}

/* Glass shine effect optimized */
.glass-shine {
  position: relative;
  overflow: hidden;
  contain: paint;
}

.glass-shine::before {
  content: '';
  position: absolute;
  inset: -50%;
  background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.05) 50%, transparent 70%);
  transform: rotate(45deg) translateX(-100%);
  animation: glassShine 3s infinite;
  will-change: transform;
}

@keyframes glassShine {
  to { transform: rotate(45deg) translateX(100%); }
}